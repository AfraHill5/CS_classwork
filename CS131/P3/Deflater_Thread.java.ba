
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.util.zip.CRC32;
import java.util.zip.Deflater;
import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.util.concurrent.Callable;
import java.util.Arrays;

public class Deflater_Thread implements Callable<ByteArray> 
{
	public static final int BLOCK_SIZE = 128*1024;
	//public static final int DICTIONARY_SIZE = 32*1024;
    public static final int HEADER_LENGTH = 10;
    public static final int FOOTER_LENGTH = 8;
    public static final int DICTIONARY_SIZE=8;

	public final ByteArray inputBA;
	public final byte[] dict;

	public Deflater_Thread(final ByteArray inputBA, final byte[] dict)
	{
		this.inputBA = inputBA;
		this.dict = dict;
	}
    
/*	public static void myHeaderWriter() {
        try
        {
        	ByteBuffer header = ByteBuffer.allocate(HEADER_LENGTH);
        	header.order(ByteOrder.LITTLE_ENDIAN);
        	header.putInt(0x00088B1F).putInt((int)(System.currentTimeMillis()/1000L)).putShort((short)0xFF00);
        	header.flip();
        	infoWriter.write(header);
        }
        catch (IOException e)
        {
        	System.err.println("error");
        };
	}	
	
	public static void myFooterWriter(int value, int length)
	{
        try
        {
            ByteBuffer footer = ByteBuffer.allocate(FOOTER_LENGTH);
        	footer.order(ByteOrder.LITTLE_ENDIAN);
        	footer.putInt(value).putInt((int)(length % Math.pow(2, 32)));
        	footer.flip();
        	infoWriter.write(footer);
        }
        catch (IOException e)
        {
        	System.err.println("error");
        };
	}
	*/
	public ByteArray call() throws Exception
    {
			//write header
			//myHeaderWriter();
			
			//initialize CRC
			//CRC32 myCRC = new CRC32();
			//myCRC.reset();
			
			//^^this is done one level up now.

			Deflater compressor = new Deflater(Deflater.DEFAULT_COMPRESSION, true);
	
			System.err.println("received bytearray: " + inputBA + " of size " + inputBA.size);
			byte[] buffer = new byte[BLOCK_SIZE];
		
			System.err.println(str);
			compressor.setInput(inputBA.b, 0, inputBA.size);
			compressor.setDictionary(dict); 
			compressor.finish();
			
			int compressedDataLength = compressor.deflate(buffer, 0, buffer.length, Deflater.SYNC_FLUSH);
			compressor.end();

			ByteArray ba = new ByteArray();
			ba.b = buffer;
			ba.size = compressedDataLength;
			return ba;
	}
}

	/*

			String inputString1 = inputString;
			String inputString2 = inputString;
			//assuming that we have split the stream into 2 strings
			byte[] input1 = inputString1.getBytes("UTF-8");
			byte[] input2 = inputString2.getBytes("UTF-8");
			
			byte[] buffer1 = new byte[100]; myCRC.update(input1, 0, inputString1.length());
			byte[] buffer2 = new byte[100]; myCRC.update(input2, 0, inputString2.length());
			
			Deflater compressor1 = new Deflater(Deflater.DEFAULT_COMPRESSION, true);
			Deflater compressor2 = new Deflater(Deflater.DEFAULT_COMPRESSION, true);

			compressor1.setInput(input1, 0, inputString1.length());
			compressor2.setInput(input2, 0, inputString2.length());

			compressor2.setDictionary(input1,(int)Math.max(0,inputString1.length()-(DICTIONARY_SIZE)),(int)Math.min(inputString1.length(),DICTIONARY_SIZE));
			
			compressor2.finish();

			int compressedDataLength1 = compressor1.deflate(buffer1, 0, inputString1.length(), Deflater.SYNC_FLUSH);
			if (compressedDataLength1>0)
			{
                try
                {
                	dataWriter.write(buffer1, 0, compressedDataLength1);
                }
                catch (IOException e)
                {
                	System.err.println("error");
                }  
			}
			
			compressor1.end();

			//write footer
			myFooterWriter((int)myCRC.getValue(), inputString1.length() + inputString2.length());
		}
		catch(java.io.UnsupportedEncodingException ex)
		{
        	System.err.println("error");
		} */ 
